"""
ü§ñ LLM-Powered BookStore Chatbot + NLU
- B·ªï sung extract_intent() ƒë·ªÉ tr·∫£ v·ªÅ JSON {intent, book_title, quantity, customer_name}
"""
import os
import json
from typing import List, Dict, Optional
from dataclasses import dataclass
from openai import OpenAI
from dotenv import load_dotenv
from sqlalchemy import select

# Import database components
from app.db import SessionLocal, init_db
from app.models import Book, Order
from app.seed import seed

load_dotenv()


@dataclass
class BookInfo:
    title: str
    author: str
    price: float
    stock: int
    category: str
    id: Optional[int] = None


@dataclass
class OrderRequest:
    book_title: str
    quantity: int
    customer_name: str
    phone: str
    address: str


class LLMChatbot:
    """LLM-powered chatbot cho BookStore v·ªõi database integration + NLU"""

    def __init__(self, api_key: Optional[str] = None, demo_seed: bool = False):
        self.api_key = api_key or os.getenv("OPENAI_API_KEY")
        if not self.api_key:
            raise ValueError("OPENAI_API_KEY is required to use LLM features.")

        self.client = OpenAI(api_key=self.api_key)
        self.conversation_history = []

        # DB init (kh√¥ng seed m·∫∑c ƒë·ªãnh ƒë·ªÉ d√πng chung v·ªõi app)
        init_db()
        if demo_seed:
            try:
                seed()
            except Exception:
                pass

        self.store_info = {
            "name": "BookStore",
            "description": "Nh√† s√°ch tr·ª±c tuy·∫øn chuy√™n b√°n s√°ch hay",
            "features": ["T√¨m ki·∫øm s√°ch", "ƒê·∫∑t h√†ng", "T∆∞ v·∫•n s√°ch hay", "Th√¥ng tin t√°c gi·∫£"],
        }

    # -------------------- DB helpers --------------------
    def get_books_from_database(self) -> List[BookInfo]:
        with SessionLocal() as session:
            books = session.execute(select(Book)).scalars().all()
            return [
                BookInfo(
                    id=b.id,
                    title=b.title,
                    author=b.author,
                    price=float(b.price),
                    stock=b.stock,
                    category=b.category,
                )
                for b in books
            ]

    # -------------------- NLU: extract_intent --------------------
    def extract_intent(self, user_text: str) -> Optional[Dict]:
        """
        Tr·∫£ v·ªÅ dict JSON:
        {
          "intent": "search" | "order" | "unknown",
          "book_title": "<exact title or ''>",
          "quantity": <int or null>,
          "customer_name": "<string or ''>"
        }
        """
        books = self.get_books_from_database()
        titles = [b.title for b in books]
        titles_txt = "\n".join(f"- {t}" for t in titles)

        system = (
            "B·∫°n l√† NLU cho BookStore. "
            "Nhi·ªám v·ª•: tr√≠ch xu·∫•t √Ω ƒë·ªãnh (intent) v√† c√°c slot t·ª´ c√¢u ng∆∞·ªùi d√πng. "
            "Ch·ªâ ƒë∆∞·ª£c ch·ªçn book_title t·ª´ danh s√°ch TITLES b√™n d∆∞·ªõi; n·∫øu kh√¥ng kh·ªõp, ƒë·ªÉ r·ªóng. "
            "Tr·∫£ v·ªÅ JSON **duy nh·∫•t**, kh√¥ng th√™m ch·ªØ n√†o kh√°c.\n\n"
            "C√°c intent:\n"
            "- 'order': ng∆∞·ªùi d√πng mu·ªën ƒë·∫∑t mua m·ªôt cu·ªën trong TITLES. C√≥ th·ªÉ ch·ª©a quantity v√† customer_name.\n"
            "- 'search': ng∆∞·ªùi d√πng mu·ªën tra c·ª©u / h·ªèi v·ªÅ s√°ch n√†o ƒë√≥ trong TITLES.\n"
            "- 'unknown': kh√¥ng thu·ªôc 2 lo·∫°i tr√™n.\n\n"
            "JSON schema:\n"
            '{"intent":"...", "book_title":"...", "quantity":null, "customer_name":""}\n\n'
            "TITLES:\n"
            f"{titles_txt}\n"
        )

        try:
            resp = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                temperature=0,
                messages=[
                    {"role": "system", "content": system},
                    {"role": "user", "content": user_text},
                ],
                max_tokens=200,
            )
            raw = resp.choices[0].message.content.strip()
            # C·ªë g·∫Øng b√≥c JSON
            start = raw.find("{")
            end = raw.rfind("}")
            if start != -1 and end != -1:
                raw = raw[start : end + 1]
            data = json.loads(raw)
            # Sanitize keys
            for k in ["intent", "book_title", "customer_name"]:
                data[k] = data.get(k) or ""
            if "quantity" not in data:
                data["quantity"] = None
            return data
        except Exception:
            return None

    # -------------------- (demo) Chat text --------------------
    def _create_system_prompt(self) -> str:
        available_books = self.get_books_from_database()
        books_info = "\n".join(
            f"- {b.title} ({b.author}) - {b.price:,.0f}ƒë - C√≤n: {b.stock} - Th·ªÉ lo·∫°i: {b.category}"
            for b in available_books
        )
        return f"""
ü§ñ B·∫°n l√† AI assistant c·ªßa BookStore.

S√ÅCH C√ì S·∫¥N:
{books_info}

NHI·ªÜM V·ª§:
1. T√¨m ki·∫øm/gi·ªõi thi·ªáu s√°ch
2. H·ªó tr·ª£ ƒë·∫∑t h√†ng (h·ªèi th√™m th√¥ng tin n·∫øu thi·∫øu)

Lu√¥n tr·∫£ l·ªùi th√¢n thi·ªán, h·ªØu √≠ch.
"""

    def chat(self, user_message: str) -> str:
        self.conversation_history.append({"role": "user", "content": user_message})
        messages = [{"role": "system", "content": self._create_system_prompt()}] + self.conversation_history[-10:]
        try:
            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo", messages=messages, max_tokens=500, temperature=0.7
            )
            ai_response = response.choices[0].message.content.strip()
            self.conversation_history.append({"role": "assistant", "content": ai_response})
            return ai_response
        except Exception as e:
            return f"Xin l·ªói, t√¥i g·∫∑p l·ªói k·ªπ thu·∫≠t: {e}"
